log_format grpc_json escape=json '{"timestamp":"$time_iso8601",'
           '"client":"$remote_addr","uri":"$uri","http-status":$status,'
           '"grpc-status":$grpc_status,"upstream":"$upstream_addr"'
           '"rx-bytes":$request_length,"tx-bytes":$bytes_sent}';

map $upstream_trailer_grpc_status $grpc_status {
    default $upstream_trailer_grpc_status; # grpc-status is usually a trailer
    ''      $sent_http_grpc_status; # Else use the header, whatever its source
}

map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

server {
    listen       51001;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/log/host.access.log  main;

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #


    location /rank-update {
        proxy_pass http://127.0.0.1:3000/pub;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Publisher-Type $nchan_publisher_type;
        proxy_set_header X-Prev-Message-Id $nchan_prev_message_id;
        proxy_set_header X-Channel-Id $nchan_channel_id;
        proxy_set_header X-Original-URI $request_uri;
    }
}

server {
    # listen 127.0.0.1:51000 http2;
    listen 51000 http2; # In production, comment out to disable plaintext port
    #listen 443   http2 ssl;
    server_name  grpc.example.com;
    access_log   /var/log/nginx/grpc_log.json grpc_json;

    # Routing
    location /stats.service. {
        grpc_pass grpc://stats_service;
    }
    location /reward.service. {
        grpc_pass grpc://pool_service;
    }

    location /rank.service. {
	    grpc_pass grpc://rank_service;
    }

    location /period.service. {
	    grpc_pass grpc://period_service;
    }

    location /cron.service. {
        grpc_pass grpc://cron_service;
    }

    # Error responses
    include conf.d/errors.grpc_conf; # gRPC-compliant error responses
    default_type application/grpc;   # Ensure gRPC for all error responses
}

# Backend gRPC servers
#
upstream stats_service {
    zone stats_service 64k;
    server 127.0.0.1:50050;
    #server 127.0.0.1:50051;
    #server 127.0.0.1:50052;
}

upstream pool_service {
    zone pool_service 64k;
    server 127.0.0.1:50060;
    #server 127.0.0.1:20002;
}

upstream period_service {
    zone period_service 64k;
    server 127.0.0.1:50040;
}

upstream rank_service {
    zone rank_service 64k;
    server 127.0.0.1:50070;
}

upstream cron_service {
    zone cron_service 64k;
    server 127.0.0.1:50080;
}
# vim: syntax=nginx
