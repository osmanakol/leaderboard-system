version: '3'
services:
  api:
    container_name: api_v1
    network_mode: bridge
    image: leaderboard_api
    restart: always
    build: 
      context: api
      dockerfile: Dockerfile
    env_file:
      - api/prod.env
    ports:
      - "10001:30000"
    links:
      - "mongo"
    depends_on:
      - mongo
      - follow3
  
  api2:
    container_name: api_v2
    network_mode: bridge
    image: leaderboard_api
    restart: always
    build: 
      context: api
      dockerfile: Dockerfile
    env_file:
      - api/prod.env
    ports:
      - "10002:30000"
    links:
      - "mongo"
    depends_on:
      - mongo
      - follow3

  react:
    container_name: react
    network_mode: bridge
    image: react_app
    restart: always
    build: 
      context: .
      dockerfile: web/react/react.Dockerfile
    ports:
      - "5000:5000"
    links:
      - "api"
      - "api2"
    depends_on:
      - mongo
      - follow3
    
  mongo:
    container_name: mongodb
    image: mongo
    build: 
      context: docker
      dockerfile: mongo.Dockerfile
    network_mode: bridge
    env_file:
      - docker/.env
    volumes:
      - ./data:/data/db
      - ./docker/init-scripts/:/docker-entrypoint-initdb.d/
    ports:
      - "27017:27017"

  nginx:
    container_name: "api_gateway"
    network_mode: host
    build: 
      context: .
      dockerfile: docker/nginx-nchan.Dockerfile
    restart: always
    depends_on:
      - api
      - api2

  stats_service:
    container_name: "stats_service"
    network_mode: bridge
    image: stats_service
    command: /bin/bash -x /tmp/build-protos.sh stats_service
    # restart: always
    volumes:
     - "/protos/:/home/app/api/protos"
    build:
      context: .
      dockerfile: services/stats_service/stats_service.Dockerfile
    env_file:
      - services/stats_service/prod.env
    ports:
      - "50050:50050"
    links:
      - "pool_service"
      - "rank_service"
      - "mongo"
    depends_on:
      - mongo
      - pool_service
      - follow3

  
  cron_service:
    container_name: "cron_service"
    network_mode: bridge
    image: cron_service
    command: /bin/bash -x /tmp/build-protos.sh cron_service
    # restart: always
    volumes:
     - "/protos/:/home/app/api/protos"
    build:
      context: .
      dockerfile: services/cron_service/cron_service.Dockerfile
    env_file:
      - services/cron_service/prod.env
    ports:
      - "50080:50080"
    links:
      - "stats_service"
      - "period_service"
      - "mongo"
    depends_on:
      - mongo
      - follow3
      - period_service
      - stats_service
      - rank_service
  

  pool_service:
    container_name: "pool_service"
    network_mode: bridge
    image: pool_service
    command: /bin/bash -x /tmp/build-protos.sh pool_service
    # restart: always
    volumes:
     - "/protos/:/home/app/api/protos"
    build: 
      context: .
      dockerfile: services/pool_service/pool_service.Dockerfile
    env_file:
      - services/pool_service/prod.env
    ports:
      - "50060:50060"
    links:
      - "mongo"
    depends_on:
      - mongo


  period_service:
    container_name: "period_service"
    network_mode: bridge
    image: period_service
    command: bash -x /tmp/build-protos.sh period_service
    build: 
      context: .
      dockerfile: services/period_service/period_service.Dockerfile
    env_file:
      - services/period_service/prod.env
    ports:
      - "50040:50040"
    links:
      - "mongo"
      - "pool_service"
      - "stats_service"
    depends_on:
      - mongo
      - stats_service
      - master1
      - follow1
      - master2
      - follow2
      - master3
      - follow3

  rank_service:
    container_name: "rank_service"
    network_mode: bridge
    image: rank_service
    command: bash -x /tmp/build-protos.sh rank_service
    build: 
      context: .
      dockerfile: services/rank_service/rank_service.Dockerfile
    env_file:
      - services/rank_service/prod.env
    ports:
      - "50070:50070"
    extra_hosts:
      - "host_machine:167.172.53.243"
    links:
      - "mongo"
      - "pool_service"
    depends_on:
      - mongo
      - master1
      - follow1
      - master2
      - follow2
      - master3
      - follow3
    
  master1:
    image: redis
    container_name: redis-cluster1-master
    command: /bin/bash -c "redis-server /etc/redis/redis.conf"
    volumes:
      - ./docker/redis-cluster/cluster1/master:/etc/redis
      - ./docker/redis-cluster/cluster1/master:/data
      - ./docker/redis-cluster/cluster1/master:/log
    ports:
      - 6379:6379
    networks:
      redisNet:
        ipv4_address: 10.10.10.10

  follow1:
    image: redis
    container_name: redis-cluster1-slave
    command: /bin/bash -c "redis-server /etc/redis/redis.conf"
    volumes:
      - ./docker/redis-cluster/cluster1/slave:/etc/redis
      - ./docker/redis-cluster/cluster1/slave:/data
      - ./docker/redis-cluster/cluster1/slave:/log
    ports:
      - 6380:6379
    networks:
      redisNet:
        ipv4_address: 10.10.10.11

  master2:
    image: redis
    container_name: redis-cluster2-master
    command: /bin/bash -c "redis-server /etc/redis/redis.conf"
    volumes:
      - ./docker/redis-cluster/cluster2/master:/etc/redis
      - ./docker/redis-cluster/cluster2/master:/data
      - ./docker/redis-cluster/cluster2/master:/log
    ports:
      - 6381:6379
    networks:
      redisNet:
        ipv4_address: 10.10.10.12

  follow2:
    image: redis
    container_name: redis-cluster2-slave
    command: /bin/bash -c "redis-server /etc/redis/redis.conf"
    volumes:
      - ./docker/redis-cluster/cluster2/slave:/etc/redis
      - ./docker/redis-cluster/cluster2/slave:/data
      - ./docker/redis-cluster/cluster2/slave:/log
    ports:
      - 6382:6379
    networks:
      redisNet:
        ipv4_address: 10.10.10.13

  master3:
    image: redis
    container_name: redis-cluster3-master
    command: /bin/bash -c "redis-server /etc/redis/redis.conf"
    volumes:
      - ./docker/redis-cluster/cluster3/master:/etc/redis
      - ./docker/redis-cluster/cluster3/master:/data
      - ./docker/redis-cluster/cluster3/master:/log
    ports:
      - 6383:6379
    networks:
      redisNet:
        ipv4_address: 10.10.10.14

  follow3:
    image: redis
    container_name: redis-cluster3-slave
    command: bash -x /home/redis-replica.sh
    volumes:
      - ./docker/init-scripts:/home
      - ./docker/redis-cluster/cluster3/slave:/etc/redis
      - ./docker/redis-cluster/cluster3/slave:/data
      - ./docker/redis-cluster/cluster3/slave:/log
    ports:
      - 6384:6379   
    networks:
      redisNet:
        ipv4_address: 10.10.10.15

networks:
  redisNet:
    external: true

